// server.js
require('dotenv').config();
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

// ====== –ö–û–ù–°–¢–ê–ù–¢–´ ======
const FRONT_ORIGIN = "https://game-front-two.vercel.app";
const PORT = process.env.PORT || 10000;
const ROUND_TIME_MS = 60_000;   // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
const VOTE_STEP_TIMEOUT_MS = 30_000; // —Ç–∞–π–º–∞—É—Ç –Ω–∞ —à–∞–≥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞–ª–æ)
const TOTAL_ROUNDS = 3;
const ALLOWED_EMOJIS = ['üòÇ', 'üôÇ', 'üí©'];

// ====== –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ======
let QUESTIONS_BANK = [
  "–°–∞–º–∞—è –Ω–µ–ª–µ–ø–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?",
  "–ï—Å–ª–∏ –±—ã –≤—ã —Å—Ç–∞–ª–∏ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º –Ω–∞ –¥–µ–Ω—å ‚Äî —á—Ç–æ –±—ã —Å–¥–µ–ª–∞–ª–∏?",
  "–ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–±—Ä–∞—Ç—å —É —Å–µ–±—è?",
  "–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –¥–∞–ª–∏ –±—ã 10-–ª–µ—Ç–Ω–µ–º—É —Å–µ–±–µ?",
  "–°–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –µ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏?",
  "–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ –≤—ã –±—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ –∑–∞ –æ–¥–Ω—É –Ω–æ—á—å?"
];
try {
  const p = path.join(__dirname, 'questions_40_1.json');
  if (fs.existsSync(p)) {
    const data = JSON.parse(fs.readFileSync(p, 'utf8'));
    if (Array.isArray(data) && data.length) {
      QUESTIONS_BANK = data;
      console.log(`Loaded ${QUESTIONS_BANK.length} questions from questions_40_1.json`);
    }
  }
} catch (e) {
  console.warn("Failed to read questions_40_1.json, using fallback questions.");
}

const app = express();
app.use(cors({ origin: FRONT_ORIGIN }));
app.use(express.json());

// healthcheck –¥–ª—è Render
app.get('/health', (req, res) => res.json({ ok: true }));

const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: FRONT_ORIGIN, methods: ["GET", "POST"], credentials: true }
});

// ====== –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –ö–û–ú–ù–ê–¢–´ ======
// rooms[roomId] = {
//   players: [{id, name}],
//   hostId: <socketId>,
//   round: 0,
//   totalRounds: TOTAL_ROUNDS,
//   scores: { [playerId]: { 'üòÇ':0, 'üôÇ':0, 'üí©':0 } },
//   state: 'lobby'|'answering'|'voting'|'results',
//   roundData: {
//     pairs: [ { members: [id1,id2], questions:[q1,q2],
//                answers: { 0: { [playerId]: text }, 1: { [playerId]: text } },
//                firstAnswerTimeMs: null } ],
//     answersCount: 0,
//     totalExpectedAnswers: pairs.length * 2 /*–≤–æ–ø—Ä–æ—Å–∞*/ * 2 /*–≤ –ø–∞—Ä–µ –∏–≥—Ä–æ–∫–æ–≤*/,
//     roundTimer: Timeout,
//     votingCursor: { pairIndex:0, qIndex:0 },
//     votes: { [pairIdx]: { [qIdx]: { [voterId]: { targetPlayerId, emoji } } } }
//   }
// }

const rooms = {};

function shuffleArr(a) {
  const arr = [...a];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = (Math.random() * (i + 1)) | 0;
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

function pairUp(playersIds) {
  const shuffled = shuffleArr(playersIds);
  const pairs = [];
  for (let i = 0; i < shuffled.length; i += 2) {
    if (i + 1 < shuffled.length) {
      pairs.push({ members: [shuffled[i], shuffled[i + 1]] });
    } else {
      // –µ—Å–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ, –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Ç—Ä–æ–π–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞—Ä–æ–π
      if (pairs.length > 0) {
        pairs[pairs.length - 1].members.push(shuffled[i]);
      } else {
        pairs.push({ members: [shuffled[i]] });
      }
    }
  }
  return pairs;
}

function getPlayerName(room, id) {
  const p = room.players.find(p => p.id === id);
  return p ? p.name : id;
}

// ====== –°–û–ö–ï–¢-–°–û–ë–´–¢–ò–Ø ======
io.on('connection', (socket) => {
  console.log("Client connected:", socket.id);

  socket.on('joinRoom', ({ roomId, playerName }) => {
    if (!roomId || !playerName) return;

    if (!rooms[roomId]) {
      rooms[roomId] = {
        players: [],
        hostId: socket.id,
        round: 0,
        totalRounds: TOTAL_ROUNDS,
        scores: {},
        state: 'lobby',
        roundData: null
      };
    }

    const room = rooms[roomId];

    // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if (!room.players.find(p => p.id === socket.id)) {
      room.players.push({ id: socket.id, name: playerName });
      if (!room.scores[socket.id]) {
        room.scores[socket.id] = { 'üòÇ': 0, 'üôÇ': 0, 'üí©': 0 };
      }
    }

    socket.join(roomId);

    io.to(roomId).emit('roomJoined', {
      roomId,
      players: room.players,
      hostId: room.hostId,
      round: room.round,
      state: room.state
    });
    io.to(roomId).emit('playerListUpdate', room.players);
  });

  socket.on('startGame', (roomId) => {
    const room = rooms[roomId];
    if (!room) return;
    if (socket.id !== room.hostId) return; // —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å

    startRound(roomId);
  });

  socket.on('submitAnswer', ({ roomId, pairIndex, qIndex, answer }) => {
    const room = rooms[roomId];
    if (!room || room.state !== 'answering' || !room.roundData) return;

    const rd = room.roundData;
    const pair = rd.pairs[pairIndex];
    if (!pair) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if (!pair.answers) pair.answers = { 0: {}, 1: {} };
    if (typeof pair.firstAnswerTimeMs !== 'number') {
      pair.firstAnswerTimeMs = Date.now(); // –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏; –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä —É–∂–µ –∏–¥—ë—Ç
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç (–∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É –Ω–∞ –≤–æ–ø—Ä–æ—Å)
    if (!pair.answers[qIndex][socket.id] && typeof answer === 'string' && answer.trim().length) {
      pair.answers[qIndex][socket.id] = answer.trim();
      rd.answersCount++;

      // –ï—Å–ª–∏ –æ–±–∞ (–∏–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–∞—Ä—ã) –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –≤—ã–¥–∞—Ç—å —Å–ª–µ–¥. –≤–æ–ø—Ä–æ—Å —ç—Ç–æ–π –ø–∞—Ä–µ
      const needCount = pair.members.length; // 2 –∏–ª–∏ 3 (—Ä–µ–¥–∫–æ)
      const gotCount = Object.keys(pair.answers[qIndex]).length;

      if (qIndex === 0 && gotCount >= Math.min(2, needCount)) {
        // –≤—ã–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å —ç—Ç–æ–π –ø–∞—Ä–µ ‚Äî —Ä–∞—Å—Å—ã–ª–∞–µ–º –ö–ê–ñ–î–û–ú–£ —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–∞—Ä—ã
        pair.members.forEach(sid => {
          io.to(sid).emit('showQuestion', {
            pairIndex,
            qIndex: 1,
            question: pair.questions[1]
          });
        });
      }
    }

    // –ï—Å–ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã (–≤—Å–µ—Ö –ø–∞—Ä, –æ–±–∞ –≤–æ–ø—Ä–æ—Å–∞, –æ—Ç 2 –∏–≥—Ä–æ–∫–æ–≤ –ø–∞—Ä—ã)
    if (rd.answersCount >= rd.totalExpectedAnswers) {
      clearTimeout(rd.roundTimer);
      startVoting(roomId);
    }
  });

  socket.on('submitVote', ({ roomId, pairIndex, qIndex, targetPlayerId, emoji }) => {
    const room = rooms[roomId];
    if (!room || room.state !== 'voting' || !room.roundData) return;
    if (!ALLOWED_EMOJIS.includes(emoji)) return;

    const rd = room.roundData;
    const pair = rd.pairs[pairIndex];
    if (!pair) return;

    // –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–∞—Ä—ã
    if (pair.members.includes(socket.id)) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≥–æ–ª–æ—Å–æ–≤
    if (!rd.votes[pairIndex]) rd.votes[pairIndex] = {};
    if (!rd.votes[pairIndex][qIndex]) rd.votes[pairIndex][qIndex] = {};

    // –û–¥–∏–Ω –≥–æ–ª–æ—Å –Ω–∞ —ç—Ç–æ—Ç (–ø–∞—Ä–∞, –≤–æ–ø—Ä–æ—Å)
    if (rd.votes[pairIndex][qIndex][socket.id]) return;

    // –¶–µ–ª—å –≥–æ–ª–æ—Å–∞ ‚Äî –æ–¥–∏–Ω –∏–∑ –æ—Ç–≤–µ—á–∞—é—â–∏—Ö
    if (!pair.answers || !pair.answers[qIndex] || !pair.answers[qIndex][targetPlayerId]) return;

    rd.votes[pairIndex][qIndex][socket.id] = { targetPlayerId, emoji };

    // –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const eligibleVoters = room.players
      .map(p => p.id)
      .filter(id => !pair.members.includes(id)); // –≤—Å–µ, –∫—Ä–æ–º–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä—ã

    const votesCount = Object.keys(rd.votes[pairIndex][qIndex]).length;
    if (votesCount >= eligibleVoters.length) {
      // –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤
      tallyVotesForStep(roomId, pairIndex, qIndex);
      nextVotingStep(roomId);
    }
  });

  socket.on('nextRound', (roomId) => {
    const room = rooms[roomId];
    if (!room) return;
    if (socket.id !== room.hostId) return;

    if (room.round < room.totalRounds) {
      startRound(roomId);
    }
  });

  socket.on('disconnect', () => {
    console.log("Client disconnected:", socket.id);
    for (const roomId in rooms) {
      const room = rooms[roomId];
      const idx = room.players.findIndex(p => p.id === socket.id);
      if (idx !== -1) {
        room.players.splice(idx, 1);
        io.to(roomId).emit('playerListUpdate', room.players);
      }
      // –ï—Å–ª–∏ —Ö–æ—Å—Ç –≤—ã—à–µ–ª ‚Äî –Ω–∞–∑–Ω–∞—á–∏–º –Ω–æ–≤–æ–≥–æ
      if (room.hostId === socket.id && room.players.length > 0) {
        room.hostId = room.players[0].id;
        io.to(roomId).emit('hostChanged', room.hostId);
      }
    }
  });
});

// ====== –õ–û–ì–ò–ö–ê –†–ê–£–ù–î–ê ======
function startRound(roomId) {
  const room = rooms[roomId];
  if (!room) return;

  room.round += 1;
  room.state = 'answering';

  // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã
  const playerIds = room.players.map(p => p.id);
  const pairsRaw = pairUp(playerIds);

  // –ù–∞–∑–Ω–∞—á–∞–µ–º 2 –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ
  const pairs = pairsRaw.map(pr => {
    // –±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const shuffled = shuffleArr(QUESTIONS_BANK);
    const q1 = String(shuffled[0]);
    const q2 = String(shuffled[1]);
    return {
      members: pr.members,
      questions: [q1, q2],
      answers: { 0: {}, 1: {} },
      firstAnswerTimeMs: null
    };
  });

  // –°—á—ë—Ç—á–∏–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
  let totalExpectedAnswers = 0;
  pairs.forEach(pr => { totalExpectedAnswers += 2 /*–≤–æ–ø—Ä–æ—Å–∞*/ * Math.min(2, pr.members.length); });

  room.roundData = {
    pairs,
    answersCount: 0,
    totalExpectedAnswers,
    roundTimer: null,
    votingCursor: { pairIndex: 0, qIndex: 0 },
    votes: {}
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–û–ü–†–û–° 1 –≤—Å–µ–º –ø–∞—Ä–∞–º —Å—Ä–∞–∑—É (–∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–∞—Ä—ã)
  pairs.forEach((pair, pairIndex) => {
    pair.members.forEach(sid => {
      io.to(sid).emit('showQuestion', {
        pairIndex,
        qIndex: 0,
        question: pair.questions[0]
      });
    });
  });

  // –û–±—â–∏–π —Ç–∞–π–º–µ—Ä –Ω–∞ —Ä–∞—É–Ω–¥ (60 —Å–µ–∫—É–Ω–¥ –æ—Ç –≤—ã–¥–∞—á–∏ –ø–µ—Ä–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
  room.roundData.roundTimer = setTimeout(() => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —É—Å–ø–µ–ª–∏
    startVoting(roomId);
  }, ROUND_TIME_MS);

  io.to(roomId).emit('roundStarted', {
    round: room.round,
    pairs: pairs.map((p, i) => ({
      pairIndex: i,
      members: p.members
    })),
    totalRounds: room.totalRounds
  });
}

function startVoting(roomId) {
  const room = rooms[roomId];
  if (!room || !room.roundData) return;

  room.state = 'voting';
  const rd = room.roundData;

  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã / –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  rd.votingCursor = { pairIndex: 0, qIndex: 0 };

  // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
  io.to(roomId).emit('votingPhaseStarted');

  // –ò –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
  emitVotingStep(roomId);
}

function emitVotingStep(roomId) {
  const room = rooms[roomId];
  if (!room || !room.roundData) return;
  const rd = room.roundData;
  const { pairIndex, qIndex } = rd.votingCursor;

  const pair = rd.pairs[pairIndex];
  if (!pair) {
    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    finishRound(roomId);
    return;
  }

  // –ï—Å–ª–∏ —É –ø–∞—Ä—ã –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥
  const ansObj = pair.answers[qIndex] || {};
  const playerIdsWithAnswers = Object.keys(ansObj);
  if (playerIdsWithAnswers.length < 2) {
    // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
    return nextVotingStep(roomId);
  }

  const eligibleVoters = room.players
    .map(p => p.id)
    .filter(id => !pair.members.includes(id));

  // –û—Ç–ø—Ä–∞–≤–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É —à–∞–≥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  io.to(roomId).emit('votingStep', {
    pairIndex,
    qIndex,
    question: pair.questions[qIndex],
    answers: playerIdsWithAnswers.map(pid => ({
      playerId: pid,
      playerName: getPlayerName(room, pid),
      answer: ansObj[pid]
    })),
    eligibleVoters
  });

  // –¢–∞–π–º–µ—Ä —à–∞–≥–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–ª–æ)
  if (!rd._voteStepTimer) {
    rd._voteStepTimer = setTimeout(() => {
      tallyVotesForStep(roomId, pairIndex, qIndex);
      nextVotingStep(roomId);
    }, VOTE_STEP_TIMEOUT_MS);
  }
}

function nextVotingStep(roomId) {
  const room = rooms[roomId];
  if (!room || !room.roundData) return;
  const rd = room.roundData;

  // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ —à–∞–≥–∞
  if (rd._voteStepTimer) {
    clearTimeout(rd._voteStepTimer);
    rd._voteStepTimer = null;
  }

  // –°–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä: —Å–Ω–∞—á–∞–ª–∞ qIndex 0 -> 1, –ø–æ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞
  if (rd.votingCursor.qIndex === 0) {
    rd.votingCursor.qIndex = 1;
  } else {
    rd.votingCursor.qIndex = 0;
    rd.votingCursor.pairIndex += 1;
  }

  emitVotingStep(roomId);
}

function tallyVotesForStep(roomId, pairIndex, qIndex) {
  const room = rooms[roomId];
  if (!room || !room.roundData) return;

  const rd = room.roundData;
  const votesMap = (rd.votes[pairIndex] && rd.votes[pairIndex][qIndex]) || {};
  const entries = Object.values(votesMap); // [{targetPlayerId, emoji}, ...]

  entries.forEach(v => {
    if (!room.scores[v.targetPlayerId]) {
      room.scores[v.targetPlayerId] = { 'üòÇ': 0, 'üôÇ': 0, 'üí©': 0 };
    }
    if (ALLOWED_EMOJIS.includes(v.emoji)) {
      room.scores[v.targetPlayerId][v.emoji] += 1;
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–≥–æ —à–∞–≥–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
  io.to(roomId).emit('votingStepTally', {
    pairIndex, qIndex, votes: votesMap
  });
}

function finishRound(roomId) {
  const room = rooms[roomId];
  if (!room) return;

  room.state = 'results';

  // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ (—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ üòÇ, –∑–∞—Ç–µ–º üôÇ, –∑–∞—Ç–µ–º –æ–±—Ä–∞—Ç–Ω. –ø–æ üí©)
  const leaderboard = room.players.map(p => {
    const s = room.scores[p.id] || { 'üòÇ': 0, 'üôÇ': 0, 'üí©': 0 };
    return {
      playerId: p.id,
      name: p.name,
      laugh: s['üòÇ'],
      smile: s['üôÇ'],
      poop: s['üí©']
    };
  }).sort((a, b) => {
    if (b.laugh !== a.laugh) return b.laugh - a.laugh;
    if (b.smile !== a.smile) return b.smile - a.smile;
    return a.poop - b.poop; // –º–µ–Ω—å—à–µ üí© ‚Äî –ª—É—á—à–µ
  });

  io.to(roomId).emit('roundResults', {
    round: room.round,
    leaderboard,
    totalRounds: room.totalRounds
  });

  // –ê–≤—Ç–æ-–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—Å–µ –ø—Ä–æ—à–ª–∏
  if (room.round < room.totalRounds) {
    setTimeout(() => {
      startRound(roomId);
    }, 5000);
  } else {
    // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
    io.to(roomId).emit('gameFinished', { leaderboard });
  }
}

server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
